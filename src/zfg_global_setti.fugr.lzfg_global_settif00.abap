*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZVI_SET_DESCRIPT................................*
FORM GET_DATA_ZVI_SET_DESCRIPT.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_SET_DESCRIPT WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_SET_DESCRIPT .
ZVI_SET_DESCRIPT-CLNT =
ZTB_SET_DESCRIPT-CLNT .
ZVI_SET_DESCRIPT-PROJECT =
ZTB_SET_DESCRIPT-PROJECT .
ZVI_SET_DESCRIPT-VAR_NAME =
ZTB_SET_DESCRIPT-VAR_NAME .
ZVI_SET_DESCRIPT-NPP =
ZTB_SET_DESCRIPT-NPP .
ZVI_SET_DESCRIPT-DESCRIPTION =
ZTB_SET_DESCRIPT-DESCRIPTION .
<VIM_TOTAL_STRUC> = ZVI_SET_DESCRIPT.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_SET_DESCRIPT .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_SET_DESCRIPT.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_SET_DESCRIPT-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_SET_DESCRIPT WHERE
  PROJECT = ZVI_SET_DESCRIPT-PROJECT AND
  VAR_NAME = ZVI_SET_DESCRIPT-VAR_NAME AND
  NPP = ZVI_SET_DESCRIPT-NPP .
    IF SY-SUBRC = 0.
    DELETE ZTB_SET_DESCRIPT .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_SET_DESCRIPT WHERE
  PROJECT = ZVI_SET_DESCRIPT-PROJECT AND
  VAR_NAME = ZVI_SET_DESCRIPT-VAR_NAME AND
  NPP = ZVI_SET_DESCRIPT-NPP .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_SET_DESCRIPT.
    ENDIF.
ZTB_SET_DESCRIPT-CLNT =
ZVI_SET_DESCRIPT-CLNT .
ZTB_SET_DESCRIPT-PROJECT =
ZVI_SET_DESCRIPT-PROJECT .
ZTB_SET_DESCRIPT-VAR_NAME =
ZVI_SET_DESCRIPT-VAR_NAME .
ZTB_SET_DESCRIPT-NPP =
ZVI_SET_DESCRIPT-NPP .
ZTB_SET_DESCRIPT-DESCRIPTION =
ZVI_SET_DESCRIPT-DESCRIPTION .
    IF SY-SUBRC = 0.
    UPDATE ZTB_SET_DESCRIPT .
    ELSE.
    INSERT ZTB_SET_DESCRIPT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_SET_DESCRIPT-UPD_FLAG,
STATUS_ZVI_SET_DESCRIPT-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_SET_DESCRIPT.
  SELECT SINGLE * FROM ZTB_SET_DESCRIPT WHERE
PROJECT = ZVI_SET_DESCRIPT-PROJECT AND
VAR_NAME = ZVI_SET_DESCRIPT-VAR_NAME AND
NPP = ZVI_SET_DESCRIPT-NPP .
ZVI_SET_DESCRIPT-CLNT =
ZTB_SET_DESCRIPT-CLNT .
ZVI_SET_DESCRIPT-PROJECT =
ZTB_SET_DESCRIPT-PROJECT .
ZVI_SET_DESCRIPT-VAR_NAME =
ZTB_SET_DESCRIPT-VAR_NAME .
ZVI_SET_DESCRIPT-NPP =
ZTB_SET_DESCRIPT-NPP .
ZVI_SET_DESCRIPT-DESCRIPTION =
ZTB_SET_DESCRIPT-DESCRIPTION .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_SET_DESCRIPT USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_SET_DESCRIPT-PROJECT TO
ZTB_SET_DESCRIPT-PROJECT .
MOVE ZVI_SET_DESCRIPT-VAR_NAME TO
ZTB_SET_DESCRIPT-VAR_NAME .
MOVE ZVI_SET_DESCRIPT-NPP TO
ZTB_SET_DESCRIPT-NPP .
MOVE ZVI_SET_DESCRIPT-CLNT TO
ZTB_SET_DESCRIPT-CLNT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_SET_DESCRIPT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_SET_DESCRIPT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_SET_DESCRIPT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_SET_PROJECT.................................*
FORM GET_DATA_ZVI_SET_PROJECT.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_SET_PROJECT WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_SET_PROJECT .
ZVI_SET_PROJECT-CLNT =
ZTB_SET_PROJECT-CLNT .
ZVI_SET_PROJECT-PROJECT =
ZTB_SET_PROJECT-PROJECT .
ZVI_SET_PROJECT-DESCRIPTION =
ZTB_SET_PROJECT-DESCRIPTION .
<VIM_TOTAL_STRUC> = ZVI_SET_PROJECT.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_SET_PROJECT .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_SET_PROJECT.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_SET_PROJECT-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_SET_PROJECT WHERE
  PROJECT = ZVI_SET_PROJECT-PROJECT .
    IF SY-SUBRC = 0.
    DELETE ZTB_SET_PROJECT .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_SET_PROJECT WHERE
  PROJECT = ZVI_SET_PROJECT-PROJECT .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_SET_PROJECT.
    ENDIF.
ZTB_SET_PROJECT-CLNT =
ZVI_SET_PROJECT-CLNT .
ZTB_SET_PROJECT-PROJECT =
ZVI_SET_PROJECT-PROJECT .
ZTB_SET_PROJECT-DESCRIPTION =
ZVI_SET_PROJECT-DESCRIPTION .
    IF SY-SUBRC = 0.
    UPDATE ZTB_SET_PROJECT .
    ELSE.
    INSERT ZTB_SET_PROJECT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_SET_PROJECT-UPD_FLAG,
STATUS_ZVI_SET_PROJECT-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_SET_PROJECT.
  SELECT SINGLE * FROM ZTB_SET_PROJECT WHERE
PROJECT = ZVI_SET_PROJECT-PROJECT .
ZVI_SET_PROJECT-CLNT =
ZTB_SET_PROJECT-CLNT .
ZVI_SET_PROJECT-PROJECT =
ZTB_SET_PROJECT-PROJECT .
ZVI_SET_PROJECT-DESCRIPTION =
ZTB_SET_PROJECT-DESCRIPTION .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_SET_PROJECT USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_SET_PROJECT-PROJECT TO
ZTB_SET_PROJECT-PROJECT .
MOVE ZVI_SET_PROJECT-CLNT TO
ZTB_SET_PROJECT-CLNT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_SET_PROJECT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_SET_PROJECT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_SET_PROJECT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_SET_VARIABLE................................*
FORM GET_DATA_ZVI_SET_VARIABLE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_SET_VARIABLE WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_SET_VARIABLE .
ZVI_SET_VARIABLE-CLNT =
ZTB_SET_VARIABLE-CLNT .
ZVI_SET_VARIABLE-PROJECT =
ZTB_SET_VARIABLE-PROJECT .
ZVI_SET_VARIABLE-VAR_NAME =
ZTB_SET_VARIABLE-VAR_NAME .
ZVI_SET_VARIABLE-SCRTEXT_M =
ZTB_SET_VARIABLE-SCRTEXT_M .
ZVI_SET_VARIABLE-VAR_TYPE =
ZTB_SET_VARIABLE-VAR_TYPE .
ZVI_SET_VARIABLE-IS_TABLE =
ZTB_SET_VARIABLE-IS_TABLE .
<VIM_TOTAL_STRUC> = ZVI_SET_VARIABLE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_SET_VARIABLE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_SET_VARIABLE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_SET_VARIABLE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_SET_VARIABLE WHERE
  PROJECT = ZVI_SET_VARIABLE-PROJECT AND
  VAR_NAME = ZVI_SET_VARIABLE-VAR_NAME .
    IF SY-SUBRC = 0.
    DELETE ZTB_SET_VARIABLE .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_SET_VARIABLE WHERE
  PROJECT = ZVI_SET_VARIABLE-PROJECT AND
  VAR_NAME = ZVI_SET_VARIABLE-VAR_NAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_SET_VARIABLE.
    ENDIF.
ZTB_SET_VARIABLE-CLNT =
ZVI_SET_VARIABLE-CLNT .
ZTB_SET_VARIABLE-PROJECT =
ZVI_SET_VARIABLE-PROJECT .
ZTB_SET_VARIABLE-VAR_NAME =
ZVI_SET_VARIABLE-VAR_NAME .
ZTB_SET_VARIABLE-SCRTEXT_M =
ZVI_SET_VARIABLE-SCRTEXT_M .
ZTB_SET_VARIABLE-VAR_TYPE =
ZVI_SET_VARIABLE-VAR_TYPE .
ZTB_SET_VARIABLE-IS_TABLE =
ZVI_SET_VARIABLE-IS_TABLE .
    IF SY-SUBRC = 0.
    UPDATE ZTB_SET_VARIABLE .
    ELSE.
    INSERT ZTB_SET_VARIABLE .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_SET_VARIABLE-UPD_FLAG,
STATUS_ZVI_SET_VARIABLE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_SET_VARIABLE.
  SELECT SINGLE * FROM ZTB_SET_VARIABLE WHERE
PROJECT = ZVI_SET_VARIABLE-PROJECT AND
VAR_NAME = ZVI_SET_VARIABLE-VAR_NAME .
ZVI_SET_VARIABLE-CLNT =
ZTB_SET_VARIABLE-CLNT .
ZVI_SET_VARIABLE-PROJECT =
ZTB_SET_VARIABLE-PROJECT .
ZVI_SET_VARIABLE-VAR_NAME =
ZTB_SET_VARIABLE-VAR_NAME .
ZVI_SET_VARIABLE-SCRTEXT_M =
ZTB_SET_VARIABLE-SCRTEXT_M .
ZVI_SET_VARIABLE-VAR_TYPE =
ZTB_SET_VARIABLE-VAR_TYPE .
ZVI_SET_VARIABLE-IS_TABLE =
ZTB_SET_VARIABLE-IS_TABLE .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_SET_VARIABLE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_SET_VARIABLE-PROJECT TO
ZTB_SET_VARIABLE-PROJECT .
MOVE ZVI_SET_VARIABLE-VAR_NAME TO
ZTB_SET_VARIABLE-VAR_NAME .
MOVE ZVI_SET_VARIABLE-CLNT TO
ZTB_SET_VARIABLE-CLNT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_SET_VARIABLE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_SET_VARIABLE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_SET_VARIABLE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
